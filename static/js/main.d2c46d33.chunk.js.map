{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","services/TaskListService.js","components/FormErrors/FormErrors.js","components/Dashboard/Dashboard.js","components/HttpComponent/HttpComponent.js","components/Register/Register.js","components/Login/Login.js","components/ChildComponent/ChildComponent.js","components/ParentComponent/ParentComponent.js","components/SharingData/SharingData.js","components/LazyLoading/LazyLoading.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","expand","Brand","to","Toggle","aria-controls","Collapse","id","Nav","className","Link","as","NavDropdown","title","Item","Form","inline","FormControl","type","placeholder","Button","variant","Component","Footer","state","currentDateYear","Date","getFullYear","this","TaskList","BehaviorSubject","TaskListService","taskList","next","localStorage","removeItem","setItem","JSON","stringify","parse","getItem","FormErrors","formErrors","Object","keys","map","fieldName","i","length","key","Dashboard","props","setTaskName","event","value","target","setState","taskName","validateField","addTaskToList","preventDefault","Promise","res","rej","listOfTasks","isComplete","then","taskNameValid","formValid","markAsComplete","index","list","markAsIncomplete","bind","fieldValidationErrors","toString","validateForm","item","idx","onClick","onSubmit","Group","controlId","Label","Control","rows","onChange","disabled","HttpComponent","onGridReady","params","gridApi","api","gridColumnApi","columnApi","sizeToFit","columnDefs","headerName","field","rowData","defaultColDef","resizable","filter","sortable","sizeColumnsToFit","getData","axios","get","response","data","x","email","first_name","last_name","console","log","rel","href","style","height","width","Register","setFirstName","firstName","setLastName","lastName","setEmail","setPassword","password","setConfirmPassword","confirmPassword","registerClick","redirect","firstNameValid","lastNameValid","emailValid","passwordValid","confirmPasswordValid","match","Text","Login","loginClick","evt","username","handleUserName","handlePassword","usernameValid","userNameValid","Check","label","ChildComponent","updateState","stopPropagation","mutateState","ParentComponent","mutateChild","newString","parentComponentData","SharingData","LazyLoaded","lazy","LazyLoading","fallback","App","Container","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d2c46d33.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\nimport { Navbar, Nav, NavDropdown, FormControl, Form, Button } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand><Link to=\"dashboard\">IVL Global</Link></Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link as={Link} to=\"dashboard\">Home</Nav.Link>\r\n                            <Nav.Link as={Link} to=\"http-test\">HTTP Example</Nav.Link>\r\n                            <NavDropdown title=\"More\" id=\"basic-nav-dropdown\">\r\n                                <NavDropdown.Item as={Link} to=\"sharing-data\">Sharing Data</NavDropdown.Item>\r\n                                <NavDropdown.Item as={Link} to=\"lazyloading\">Lazy Loading</NavDropdown.Item>\r\n                                {/* <NavDropdown.Item as={Link} to=\"something\">Something</NavDropdown.Item>\r\n                                <NavDropdown.Divider />\r\n                                <NavDropdown.Item as={Link} to=\"seperated-link\">Separated link</NavDropdown.Item> */}\r\n                            </NavDropdown>\r\n                        </Nav>\r\n                        <Form inline>\r\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                            <Button variant=\"outline-success\">Search</Button>\r\n                        </Form>\r\n                        <Form inline>\r\n                            <Button variant=\"outline-info\" className=\"ml-1\"><Link to=\"/\">Logout</Link></Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './Footer.css';\r\n\r\nexport default class Footer extends Component {\r\n    state = {\r\n        currentDateYear: new Date().getFullYear()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"text-center\">\r\n                &copy; {this.state.currentDateYear} IVL Global Pvt. Ltd.\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\n\r\nconst TaskList = new BehaviorSubject([])\r\n\r\nconst TaskListService = {\r\n    send: function (taskList) {\r\n        // TaskList.value = [...TaskList.value, task]\r\n        TaskList.next(taskList);\r\n        localStorage.removeItem('taskList');\r\n        localStorage.setItem('taskList', JSON.stringify(taskList));\r\n    },\r\n    getIfExist: function () {\r\n        const taskList = JSON.parse(localStorage.getItem('taskList'));\r\n        if (taskList !== null) {\r\n            TaskList.next(taskList);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    TaskList,\r\n    TaskListService\r\n}","import React from 'react';\r\nimport './FormErrors.css';\r\nexport const FormErrors = ({ formErrors }) =>\r\n    <div className='formErrors'>\r\n        {Object.keys(formErrors).map((fieldName, i) => {\r\n            if (formErrors[fieldName].length > 0) {\r\n                return (\r\n                    <p className=\"error-message\" key={i}>{fieldName} {formErrors[fieldName]}</p>\r\n                )\r\n            } else {\r\n                return '';\r\n            }\r\n        })}\r\n    </div>","import React, { Component } from 'react';\r\nimport './Dashboard.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { TaskList, TaskListService } from '../../services/TaskListService';\r\nimport { FormErrors } from '../FormErrors/FormErrors';\r\n\r\n// import { Route, Switch } from 'react-router-dom';\r\n// import HttpComponent from '../HttpComponent/HttpComponent';\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        TaskListService.getIfExist();\r\n        this.state = {\r\n            taskName: '',\r\n            listOfTasks: TaskList.value,\r\n            formErrors: { taskName: '' },\r\n            taskNameValid: false,\r\n            formValid: false\r\n        }\r\n        // TaskListService.send(this.state.listOfTasks);\r\n        // TaskList.subscribe(\r\n        //     (taskList) => {\r\n        //         this.state = {\r\n        //             taskName: '',\r\n        //             listOfTasks: taskList\r\n        //         }\r\n        //     }\r\n        // );\r\n\r\n        this.setTaskName.bind(this);\r\n        this.addTaskToList.bind(this);\r\n        this.markAsComplete.bind(this);\r\n        this.markAsIncomplete.bind(this);\r\n    }\r\n    setTaskName = (event) => {\r\n        // debugger;\r\n        // if (event.target.value.toString()[event.target.value.length - 1].charCode === 13) {\r\n        // if (event.target.value.toString().charAt(event.targe.value.toString().length).charCode === 13 && event.shiftKey === false) {\r\n        let value = event.target.value;\r\n        this.setState({\r\n            taskName: value\r\n        }, () => { this.validateField('taskName', value) })\r\n        // }\r\n    }\r\n    validateField(fieldName, value) {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        // let emailValid = this.state.emailValid;\r\n        // let passwordValid = this.state.passwordValid;\r\n        let taskNameValid = this.state.taskNameValid;\r\n\r\n        // switch (fieldName) {\r\n        //     case 'email':\r\n        //         emailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n        //         fieldValidationErrors.email = emailValid ? '' : ' is invalid';\r\n        //         break;\r\n        //     case 'password':\r\n        //         passwordValid = value.length >= 6;\r\n        //         fieldValidationErrors.password = passwordValid ? '' : ' is too short';\r\n        //         break;\r\n        //     default:\r\n        //         break;\r\n        // }\r\n        taskNameValid = value.toString().length > 0 ? true : false;\r\n        fieldValidationErrors.taskName = taskNameValid ? '' : ' is invalid';\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            // emailValid: emailValid,\r\n            taskNameValid: taskNameValid\r\n            // passwordValid: passwordValid\r\n        }, this.validateForm);\r\n    }\r\n\r\n    validateForm() {\r\n        this.setState({ formValid: this.state.taskNameValid });\r\n    }\r\n\r\n    addTaskToList = (event) => {\r\n        debugger;\r\n        // alert(event.target.value)\r\n        // if (event.key === 'Enter' && event.shiftKey === false) {\r\n        event.preventDefault();\r\n        new Promise((res, rej) => {\r\n            this.setState(state => {\r\n                const list = [...state.listOfTasks, {\r\n                    taskName: this.state.taskName,\r\n                    isComplete: false\r\n                }];// state.listOfTasks.push(this.state.taskName);\r\n                return {\r\n                    listOfTasks: list,\r\n                    taskName: ''\r\n                }\r\n            });\r\n            res();\r\n        }).then(() => {\r\n            TaskListService.send(this.state.listOfTasks);\r\n            this.setState({\r\n                formErrors: { taskName: '' },\r\n                taskNameValid: false,\r\n                formValid: false\r\n            })\r\n        })\r\n\r\n        // const list = this.state.listOfTasks.push({\r\n        //     taskName: this.state.taskName,\r\n        //     isComplete: false\r\n        // });\r\n\r\n        // this.setState({\r\n        //     taskName: ''\r\n        // });\r\n\r\n    }\r\n\r\n    markAsComplete = (index) => {\r\n        new Promise((res, rej) => {\r\n            this.setState(state => {\r\n                debugger;\r\n                const list = state.listOfTasks[index].isComplete = true;\r\n                return {\r\n                    list\r\n                }\r\n            })\r\n            res();\r\n        }).then(() => {\r\n            TaskListService.send(this.state.listOfTasks);\r\n        })\r\n        // this.state.listOfTasks[index].isComplete = true;\r\n    }\r\n    markAsIncomplete = (index) => {\r\n        new Promise((res, rej) => {\r\n            this.setState(state => {\r\n                const list = state.listOfTasks[index].isComplete = false;\r\n                return {\r\n                    list\r\n                }\r\n            })\r\n            res();\r\n        }).then(() => {\r\n            TaskListService.send(this.state.listOfTasks);\r\n        })\r\n        // this.state.listOfTasks[index].isComplete = false;\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header />\r\n                </div>\r\n                <div className=\"panel panel-default\">\r\n                    <FormErrors formErrors={this.state.formErrors} />\r\n                </div>\r\n                <div>\r\n                    <ul className=\"list-group\">\r\n                        {this.state.listOfTasks.map((item, idx) => {\r\n                            return <li\r\n                                className={item.isComplete ? 'list-group-item list-group-item-success' : 'list-group-item list-group-item-secondary'} key={idx}>\r\n                                <div className=\"d-flex justify-content-between\">\r\n                                    <div className=\"task\">\r\n                                        {item.taskName}\r\n                                    </div>\r\n                                    <div>\r\n                                        {!this.state.listOfTasks[idx].isComplete &&\r\n                                            (<Button variant=\"primary\" type=\"submit\" id={idx} onClick={() => this.markAsComplete(idx)}>Mark as Complete</Button>)}\r\n                                        {this.state.listOfTasks[idx].isComplete &&\r\n                                            (<Button variant=\"primary\" type=\"submit\" onClick={() => this.markAsIncomplete(idx)}>Mark as Incomplete</Button>)}\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n                <div>\r\n                    <Form onSubmit={this.addTaskToList}>\r\n                        <Form.Group controlId=\"taskName\">\r\n                            <Form.Label>Enter Task</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows=\"3\" value={this.state.taskName}\r\n                                onChange={this.setTaskName} /> <br />\r\n                            <Button variant=\"primary\" type=\"submit\" disabled={!this.state.formValid}>\r\n                                Submit\r\n                            </Button>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport { AgGridReact } from 'ag-grid-react';\r\nimport 'ag-grid-community/dist/styles/ag-grid.css';\r\nimport 'ag-grid-community/dist/styles/ag-theme-balham.css';\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\n\r\nexport default class HttpComponent extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            columnDefs: [\r\n                {\r\n                    headerName: \"Sr. No.\",\r\n                    field: \"id\"\r\n                },\r\n                {\r\n                    headerName: \"Email\",\r\n                    field: \"email\"\r\n                },\r\n                {\r\n                    headerName: \"First Name\",\r\n                    field: \"first_name\"\r\n                },\r\n                {\r\n                    headerName: \"Last Name\",\r\n                    field: \"last_name\"\r\n                }\r\n            ],\r\n            rowData: [],\r\n            defaultColDef: {\r\n                resizable: true,\r\n                filter: true,\r\n                sortable: true\r\n            },\r\n\r\n        }\r\n    }\r\n    sizeToFit() {\r\n        this.gridApi.sizeColumnsToFit();\r\n    };\r\n\r\n    onGridReady = params => {\r\n        this.gridApi = params.api;\r\n        this.gridColumnApi = params.columnApi;\r\n        this.sizeToFit();\r\n    };\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    async getData() {\r\n        let response = await axios.get('https://reqres.in/api/users');\r\n        response = response.data.data.map(x => {\r\n            return {\r\n                id: x.id,\r\n                email: x.email,\r\n                first_name: x.first_name,\r\n                last_name: x.last_name\r\n            }\r\n        });\r\n\r\n        console.log(response);\r\n        console.log(typeof (response));\r\n        debugger;\r\n        this.setState({\r\n            rowData: response\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header />\r\n                </div>\r\n                <div>\r\n                    <div className=\"text-center\">\r\n                        HTTP Component - Get Data from free API - <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://reqres.in/api/users\">https://reqres.in/api/users</a>.\r\n                </div>\r\n                    <div className=\"ag-theme-balham\" style={{ height: '200px', width: '100%' }}>\r\n                        <AgGridReact\r\n                            columnDefs={this.state.columnDefs}\r\n                            rowData={this.state.rowData}\r\n                            onGridReady={this.onGridReady}\r\n                            defaultColDef={this.state.defaultColDef}>\r\n                        </AgGridReact>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './Register.css';\r\nimport { FormErrors } from '../FormErrors/FormErrors';\r\n\r\nexport default class Register extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            redirect: '',\r\n            formErrors: {\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                password: '',\r\n                confirmPassword: '',\r\n            },\r\n            firstNameValid: false,\r\n            lastNameValid: false,\r\n            emailValid: false,\r\n            passwordValid: false,\r\n            confirmPasswordValid: false,\r\n        }\r\n        this.setFirstName.bind(this);\r\n        this.setLastName.bind(this);\r\n        this.setEmail.bind(this);\r\n        this.setPassword.bind(this);\r\n        this.setConfirmPassword.bind(this);\r\n        this.registerClick.bind(this);\r\n    }\r\n\r\n    setFirstName = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            firstName: value\r\n        }, () => { this.validateField('firstname', value) });\r\n    }\r\n    setLastName = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            lastName: value\r\n        }, () => { this.validateField('lastname', value) });\r\n    }\r\n    setEmail = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            email: value\r\n        }, () => { this.validateField('email', value) });\r\n    }\r\n    setPassword = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            password: value\r\n        }, () => { this.validateField('password', value) });\r\n    }\r\n    setConfirmPassword = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            confirmPassword: value\r\n        }, () => { this.validateField('confirmPassword', value) });\r\n    }\r\n\r\n    validateField(fieldName, value) {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        let password = this.state.password;\r\n\r\n        let firstNameValid = this.state.firstNameValid;\r\n        let lastNameValid = this.state.lastNameValid;\r\n        let emailValid = this.state.emailValid;\r\n        let passwordValid = this.state.passwordValid;\r\n        let confirmPasswordValid = this.state.confirmPasswordValid;\r\n\r\n        switch (fieldName) {\r\n            case 'firstname':\r\n                firstNameValid = value.length > 0;\r\n                fieldValidationErrors.firstName = firstNameValid ? '' : ' cannot be empty.';\r\n                break;\r\n            case 'lastname':\r\n                lastNameValid = value.length > 0;\r\n                fieldValidationErrors.lastName = lastNameValid ? '' : ' cannot be empty.';\r\n                break;\r\n            case 'email':\r\n                emailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n                fieldValidationErrors.email = emailValid ? '' : ' is invalid.';\r\n                break;\r\n            case 'password':\r\n                passwordValid = value.length >= 6;\r\n                fieldValidationErrors.password = passwordValid ? '' : ' is too short.';\r\n                break;\r\n            case 'confirmPassword':\r\n                confirmPasswordValid = value === password;\r\n                fieldValidationErrors.confirmPassword = confirmPasswordValid ? '' : ' do not match with password.';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // taskNameValid = value.toString().length > 0 ? true : false;\r\n        // fieldValidationErrors.taskName = taskNameValid ? '' : ' is invalid';\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            // usernameValid: userNameValid,\r\n            // taskNameValid: taskNameValid\r\n            firstNameValid: firstNameValid,\r\n            lastNameValid: lastNameValid,\r\n            emailValid: emailValid,\r\n            passwordValid: passwordValid,\r\n            confirmPasswordValid: confirmPasswordValid\r\n        }, this.validateForm);\r\n    }\r\n\r\n    validateForm() {\r\n        this.setState({ formValid: (this.state.firstNameValid && this.state.lastNameValid && this.state.emailValid && this.state.passwordValid && this.state.confirmPasswordValid) });\r\n    }\r\n\r\n    registerClick = (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state.firstName);\r\n        console.log(this.state.lastName);\r\n        console.log(this.state.email);\r\n        console.log(this.state.password);\r\n        console.log(this.state.confirmPassword);\r\n        console.log(`Registration Successful...`);\r\n        this.setState({\r\n            redirect: '/'\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"d-flex justify-content-around\">\r\n                    <div className=\"register-banner\">\r\n                        REGISTRATION\r\n                    </div>\r\n                    <div>\r\n                        Already registered user, please Login\r\n                        <div>\r\n                            <Link to=\"/\">Login</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"panel panel-default\">\r\n                        <FormErrors formErrors={this.state.formErrors} />\r\n                    </div>\r\n                    <Form onSubmit={this.registerClick}>\r\n                        <Form.Group controlId=\"firstName\">\r\n                            <Form.Label>First Name</Form.Label>\r\n                            <Form.Control onChange={this.setFirstName} type=\"text\" placeholder=\"Enter First Name\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"lastname\">\r\n                            <Form.Label>Last Name</Form.Label>\r\n                            <Form.Control onChange={this.setLastName} type=\"text\" placeholder=\"Enter Last Name\" />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"emailId\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control onChange={this.setEmail} type=\"email\" placeholder=\"Enter email\" />\r\n                            <Form.Text className=\"text-muted\">\r\n                                We'll never share your email with anyone else.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"password\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.setPassword} />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"confirm-password\">\r\n                            <Form.Label>Confirm Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Confirm Password\" onChange={this.setConfirmPassword} />\r\n                        </Form.Group>\r\n\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={!this.state.formValid}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport './Login.css';\r\nimport { FormErrors } from '../FormErrors/FormErrors';\r\n\r\nexport default class Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            password: '',\r\n            redirect: null,\r\n            formErrors: {\r\n                username: '',\r\n                password: ''\r\n            },\r\n            usernameValid: false,\r\n            passwordValid: false,\r\n            formValid: false\r\n        }\r\n        this.loginClick.bind(this);\r\n        this.handleUserName.bind(this);\r\n        this.handlePassword.bind(this);\r\n    }\r\n    loginClick = (evt) => {\r\n        evt.preventDefault();\r\n        console.log(`User Name - ${this.state.username}`);\r\n        console.log(`Password - ${this.state.password}`);\r\n        console.log(`login successful...`);\r\n        this.setState({\r\n            redirect: 'dashboard'\r\n        })\r\n    }\r\n    handleUserName = (event) => {\r\n        let value = event.target.value;\r\n        this.setState({\r\n            username: value\r\n        },() =>  { this.validateField('username', value) })\r\n        // this.state.username = event.target.value;\r\n    }\r\n    handlePassword = (event) => {\r\n        let value = event.target.value;\r\n        this.setState({\r\n            password: value\r\n        },() =>  { this.validateField('password', value) })\r\n        // this.state.password = event.target.value;\r\n    }\r\n    validateField(fieldName, value) {\r\n        let fieldValidationErrors = this.state.formErrors;\r\n        // let emailValid = this.state.emailValid;\r\n        // let passwordValid = this.state.passwordValid;\r\n        let userNameValid = this.state.usernameValid;\r\n        let passwordValid = this.state.passwordValid;\r\n        switch (fieldName) {\r\n            case 'username':\r\n                userNameValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n                fieldValidationErrors.username = userNameValid ? '' : ' is invalid';\r\n                break;\r\n            case 'password':\r\n                passwordValid = value.length > 0;\r\n                fieldValidationErrors.password = passwordValid ? '' : ' cannot be empty.';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // taskNameValid = value.toString().length > 0 ? true : false;\r\n        // fieldValidationErrors.taskName = taskNameValid ? '' : ' is invalid';\r\n        this.setState({\r\n            formErrors: fieldValidationErrors,\r\n            usernameValid: userNameValid,\r\n            // taskNameValid: taskNameValid\r\n            passwordValid: passwordValid\r\n        }, this.validateForm);\r\n    }\r\n\r\n    validateForm() {\r\n        this.setState({ formValid: (this.state.usernameValid && this.state.passwordValid) });\r\n    }\r\n    render() {\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div>\r\n                <div className=\"d-flex justify-content-around\">\r\n                    <div className=\"login-banner\">\r\n                        ACCOUNT LOGIN\r\n                    </div>\r\n                    <div>\r\n                        Not a User, Please register\r\n                    <div>\r\n                            <Link to=\"/register\">Register</Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div>\r\n                    <div className=\"panel panel-default\">\r\n                        <FormErrors formErrors={this.state.formErrors} />\r\n                    </div>\r\n                    <Form onSubmit={this.loginClick}>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control onChange={this.handleUserName} type=\"email\" placeholder=\"Enter email\" />\r\n                            <Form.Text className=\"text-muted\">\r\n                                We'll never share your email with anyone else.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group controlId=\"formBasicPassword\">\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type=\"password\" placeholder=\"Password\" onChange={this.handlePassword} />\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"formBasicCheckbox\">\r\n                            <Form.Check type=\"checkbox\" label=\"Remember me\" />\r\n                        </Form.Group>\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={!this.state.formValid}>\r\n                            Submit\r\n                        </Button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ChildComponent extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateState.bind(this);\r\n    }\r\n\r\n    updateState = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.props.mutateState('Dynamic Message')\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"border\">\r\n                Child Component\r\n                <div>\r\n                    {this.props.value}\r\n                </div>\r\n                <button type=\"button\" onClick={this.updateState}>Change Message</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport ChildComponent from '../ChildComponent/ChildComponent'\r\n\r\nexport default class ParentComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            parentComponentData: 'Static Message'\r\n        }\r\n        this.mutateChild.bind(this);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"border\">\r\n                ParentComponent\r\n                <div>\r\n                    {this.state.parentComponentData}\r\n                    <ChildComponent value={this.state.parentComponentData}  mutateState={this.mutateChild} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    mutateChild = (newString) => {\r\n        this.setState({\r\n            parentComponentData: newString\r\n        })\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Header from '../Header/Header';\r\nimport Footer from '../Footer/Footer';\r\nimport ParentComponent from '../ParentComponent/ParentComponent';\r\n\r\nexport default class SharingData extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    // }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header />\r\n                </div>\r\n                <div>\r\n                    <h1 className=\"text-center\">Sharing Data</h1>\r\n                    <div>\r\n                        <ParentComponent />\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense, lazy } from 'react'\r\nimport Header from '../Header/Header'\r\nimport Footer from '../Footer/Footer'\r\nconst LazyLoaded = lazy(() => import('../LazyLoaded/LazyLoaded'));\r\n\r\nexport default class LazyLoading extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <Header />\r\n                </div>\r\n                <div>\r\n                    <h1 className=\"text-center\">\r\n                        <Suspense fallback={`Still Loading...`}>\r\n                            <LazyLoaded />\r\n                        </Suspense>\r\n                    </h1>\r\n                </div>\r\n                <div>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { Route, Switch } from 'react-router-dom';\nimport Dashboard from './components/Dashboard/Dashboard';\nimport HttpComponent from './components/HttpComponent/HttpComponent';\nimport Register from './components/Register/Register';\nimport Login from './components/Login/Login';\nimport { Container } from 'react-bootstrap';\nimport SharingData from './components/SharingData/SharingData';\nimport LazyLoading from './components/LazyLoading/LazyLoading';\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <Switch>\n          <Route exact path=\"/\" component={Login} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route exact path=\"/dashboard\" component={Dashboard} />\n          <Route exact path=\"/http-test\" component={HttpComponent} />\n          <Route exact path=\"/sharing-data\" component={SharingData} />\n          <Route exact path=\"/lazyloading\" component={LazyLoading} />\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}